// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CardValidation.IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreditCardValidationFeature : object, Xunit.IClassFixture<CreditCardValidationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Credit Card Validation", "    As a system user\r\n    I want to validate credit card information\r\n    So that" +
                " I can ensure the card data is correct", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreditCardValidation.feature"
#line hidden
        
        public CreditCardValidationFeature(CreditCardValidationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate a valid Visa credit card")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Validate a valid Visa credit card")]
        public async System.Threading.Tasks.Task ValidateAValidVisaCreditCard()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate a valid Visa credit card", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Owner",
                            "Number",
                            "Date",
                            "Cvv"});
                table1.AddRow(new string[] {
                            "John Smith",
                            "4111111111111111",
                            "12/25",
                            "123"});
#line 7
        await testRunner.GivenAsync("I have a credit card with the following data:", ((string)(null)), table1, "Given ");
#line hidden
#line 10
        await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
        await testRunner.ThenAsync("I should receive status code 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
        await testRunner.AndAsync("the card type should be \"Visa\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate a valid MasterCard credit card")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Validate a valid MasterCard credit card")]
        public async System.Threading.Tasks.Task ValidateAValidMasterCardCreditCard()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate a valid MasterCard credit card", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Owner",
                            "Number",
                            "Date",
                            "Cvv"});
                table2.AddRow(new string[] {
                            "Mary Johnson",
                            "5412345678901234",
                            "12/25",
                            "123"});
#line 15
        await testRunner.GivenAsync("I have a credit card with the following data:", ((string)(null)), table2, "Given ");
#line hidden
#line 18
        await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
        await testRunner.ThenAsync("I should receive status code 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 20
        await testRunner.AndAsync("the card type should be \"MasterCard\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate a credit card with invalid data")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Validate a credit card with invalid data")]
        public async System.Threading.Tasks.Task ValidateACreditCardWithInvalidData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate a credit card with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Owner",
                            "Number",
                            "Date",
                            "Cvv"});
                table3.AddRow(new string[] {
                            "John123",
                            "1234567890123456",
                            "13/25",
                            "abc"});
#line 23
        await testRunner.GivenAsync("I have a credit card with the following data:", ((string)(null)), table3, "Given ");
#line hidden
#line 26
        await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
        await testRunner.ThenAsync("I should receive status code 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Missing owner causes validation error")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Missing owner causes validation error")]
        public async System.Threading.Tasks.Task MissingOwnerCausesValidationError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Missing owner causes validation error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Owner",
                            "Number",
                            "Date",
                            "Cvv"});
                table4.AddRow(new string[] {
                            "",
                            "4111111111111111",
                            "12/99",
                            "123"});
#line 30
        await testRunner.GivenAsync("I have a credit card with the following data:", ((string)(null)), table4, "Given ");
#line hidden
#line 33
        await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
        await testRunner.ThenAsync("I should receive status code 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CreditCardValidationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CreditCardValidationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
